/*
 * Implement a data structure supporting the following operations:
 *  1. Inc(Key) - Inserts a new key with value 1. Or increments an existing key
 *  by 1. Key is guaranteed to be a non-empty string.
 *  2. Dec(Key) - If Key's value is 1, remove it from the data structure. Otherwise
 *  decrements an existing key by 1. If the key does not exist, this function does 
 *  nothing. Key is guaranteed to be a non-empty string.
 *  3. GetMaxKey() - Returns one of the keys with maximal value. If no elements exists,
 *  return an empty string "".
 *  4. GetMinKey() - Returns one of teh keys with minimal value. If no elements exists, 
 *  return an empty string "".
 *
 *  Challenge: Perform all these actions in O(1) time complexity.
 *
 *  Date: 05/20/2020
 *  Author: Wei Du
 */
#include <functional>
#include <string>
#include <climits>
#include <queue>
#include <unordered_map>
using namespace std;

class AllOne {
public:
    /** Initialize your data structure here. */
    AllOne() : counter(0), maxVal(INT_MIN), minVal(INT_MAX) {}
    
    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */
    void inc(string key) {
        ++mapp[key];
        if (mapp[key] == 1)
            ++counter;
    }
    
    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */
    void dec(string key) {
        --mapp[key];
        if (mapp[key] == 0)
            --counter;
    }
    
    /** Returns one of the keys with maximal value. */
    string getMaxKey() {
        
    }
    
    /** Returns one of the keys with Minimal value. */
    string getMinKey() {
        
    }
private:
    std::unordered_map<std::string, int> mapp;
    int counter;
    //int maxVal;
    //int minVal;
    std::priority_queue<int, std::greater<int>> maxq;
    std::priority_queue<int, std::less<int>> minq;
};

/**
 * Your AllOne object will be instantiated and called as such:
 * AllOne* obj = new AllOne();
 * obj->inc(key);
 * obj->dec(key);
 * string param_3 = obj->getMaxKey();
 * string param_4 = obj->getMinKey();
 */
