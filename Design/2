/*
 * Design a data structure that supports the following two operations:
 * void addWord(word)
 * void search(word)
 * search(word) can search a literal word or a regular expression string
 * containing only letters a-z or ..
 * A . means it can represent any one letter.
 *
 * You may assume that all words are consist of lowercase letters a-z.
 *
 * Date: 05/23/2020
 * Author: Wei Du
 */
#include <string>
#include <unordered_map>
using namespace std;

class WordDictionary {
public:
    /** Initialize your data structure here. */
    WordDictionary() {
        
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
