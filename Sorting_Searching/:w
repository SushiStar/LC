/*
 * Given an integer array nums, return the number of range sums that lie in
 * [lower, upper] inclusive. Range sum S(i,j) is defined as the sum of the
 * elements in nums between indices i and j (i <= j), inclusive.
 *
 * Note: A naive algorithm of O(n^2) is trivial. You MUST do better than that.
 *
 * Date: 06/28/2020
 * Author: Wei du
 */

#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
	int countRangeSum(vector<int> &nums, int lower, int upper) {
		if (nums.empty()) return 0;
		unordered_map<int, int> cnt;
		for (int i =0 ; i < nums.size(); ++i) {

		}
	}
};
