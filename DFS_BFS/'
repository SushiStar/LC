/*
 * Given an m x n matrix of non-negative integers representing the height
 * of each unit cell in a continent, the "Pacific Ocean" touches the left
 * and top edges of the matrix and the "Atlantic Ocean" touches the right
 * and bottom edges.
 * Water can only flow in four directions (up, down, left, or right) from
 * a cell to another one with height equal or lower.
 * Find the list of grid coordinates where water can flow to both the Pacific
 * and Atlantic ocean.
 *
 * The order of returned grid coordinates does not matter.
 * Both m and n are less than 150.
 *
 * Date: 05/29/2020
 * Author: Wei Du
 */

#include <array>
#include <vector>
using namespace std;

class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>> &matrix) {
        vector<vector<int>> ret{};
        if (matrix.empty() || matrix[0].empty()) return ret;
        visited.resize(matrix.size(), std::vector<bool>(matrix[0].size(),false));
        connectPacific.resize(matrix.size(), std::vector<int>(matrix[0].size(),0));
        connectAtlantic.resize(matrix.size(), std::vector<int>(matrix[0].size(),0));

        for (int i = 0; i < matrix.size(); ++i) {
            for (int j = 0; j < matrix[0].size(); ++j) {
                flowToPacific(matrix, i, j);
                flowToAtlantic(matrix, i, j);
            }
        }
        return ret;
    }

private:
    vector<vector<bool>> visited;
    vector<vector<int>> connectPacific;
    vector<vector<int>> connectAtlantic;

    int flowToPacific(const vector<vector<int>> &matrix, int x, int y) {
        if (connectPacific[x][y] != 0) 
            return connectPacific[x][y];

        // never visited, do bfs;
        visited[x][y] = true;
        connectPacific[x][y] = -1;
        if (x == 0 || y == 0) {
            connectPacific[x][y] = 1;
            return connectPacific[x][y];
        }

        // up
        // down
        // left
        // right

        visited[x][y] = false;
    }

    int flowToAtlantic(const vector<vector<int>> &matrix, int x, int y) {

    }
};
